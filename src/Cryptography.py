from typing import Type
from rabe_py import aw11
from rabe_py import ac17

class ABEscheme:
    def encrypt(self, plaintext:str) -> None:
        pass

    def decrypt(self, ciphertext:str) -> str:
        pass

    def keygen(self) -> None:
        pass
    

class ABE:
    def __init__(self, scheme:Type, attributes:list[str], policy:str):
        if scheme == Aw11:
            self.aw11 = Aw11(attributes, policy)
        elif scheme == KPAc17:
            self.kpac17 = KPAc17(attributes, policy)
        elif scheme == CPAc17:
            self.cpac17 = CPAc17(attributes, policy)
        else:
            print("Scheme has to be either aw11 or ac17")


class Aw11(ABEscheme):
    """
    Python wrapper for the Aw11 schceme implemented in (rabe::schemes::aw11)
    """
    def __init__(self, attributes:list[str], policy:str):
        self.attributes = attributes
        self.policy = policy 
        self.gk = None
        self.pk = None
        self.msk = None
        self.sk = None

    def encrypt(self, plaintext:str):
        """
        This function encrypts plaintext data using a given JSON string policy and a list of attributes
        and produces a ciphertext if successfull

        Arguments:
        * plaintext - The plaintext data given as a string

        Returns:
        * cipheretext - The ciphertext generated by aw11.encrypt()
        """
        try:
            ciphertext = aw11.encrypt(self.gk, self.pk, self.policy, plaintext)
            return ciphertext
        except:
            raise ValueError("Argument has wrong type") 
    

    def decrypt(self, ciphertext):
        """
        This function decrypts the ciphertext if the attributes in msk match the policy of ct.

        Arguments:
        * ciphertext - The ciphertext generated by aw11.encrypt()

        Returns:
        * plaintext - The decrypted ciphertext as a list of u8's, generated by aw11.decrypt()
        """
        try:
            plaintext = aw11.decrypt(self.gk, self.sk, ciphertext)
        except:
            raise ValueError("Argument has wrong type")
        return plaintext


    def generate_static_keys(self):
        """
        This function generates a static key, the global key (gk).
        """
        self.gk = aw11.setup()
    

    def load_static_keys(self, gk):
        """
        This function loads a new static key.

        Arguments:
        * gk - A Global Parameters Key, generated by aw11.setup()
        """
        self.gk = gk

    def keygen(self, user_name:str, user_attribute:list[str]):
        """
        This function generates all non-static keys, public key(pk), master secret key(msk) and a secret key(sk).

        Arguments:
        * user_name       - The name of the user the key is associated with, must be unique
        * user_attributes - A list of string attributes assigned to this user
        """
        try:
            (pk, msk) = aw11.authgen(self.gk, self.attributes)
            sk = aw11.keygen(self.gk, msk, user_name, user_attribute)
            self.pk = pk
            self.sk = sk
        except:
            raise ValueError("Arguments has wrong type")
        

class KPAc17(ABEscheme):
    """
    Python wrapper for the KPAc17 schceme implemented in (rabe::schemes::ac17)
    """
    def __init__(self, attributes:list[str], policy:str):
        self.attributes = attributes
        self.policy = policy
        self.pk = None
        self.msk = None
        self.sk = None

    def encrypt(self, plaintext:str):
        """
        This function encrypts plaintext data using a given JSON string policy and a list of attributes
        and produces a ciphertext if successfull

        Arguments:
        * plaintext - The plaintext data given as a string

        Returns:
        * cipheretext - The ciphertext generated by ac17.kp_encrypt()
        """
        try:
            ciphertext = ac17.kp_encrypt(self.pk, self.attributes, plaintext)
            return ciphertext
        except:
            raise ValueError("Argument has wrong type")

    def decrypt(self, ciphertext:str):
        """
        This function decrypts the ciphertext if the attributes in msk match the policy of ct.

        Arguments:
        * ciphertext - The ciphertext generated by ac17.kp_encrypt()

        Returns:
        * plaintext - The decrypted ciphertext as a list of u8's, generated by ac17.kp_decrypt()
        """
        try:
            plaintext = ac17.kp_decrypt(self.sk, ciphertext)
            return plaintext
        except:
            raise ValueError("Argument has wrong type")
    

    def generate_static_keys(self):
        """
        This function generates static keys, the public key (pk) and the master secret key (msk).
        """
        (pk, msk) = ac17.setup()
        self.pk = pk
        self.msk = msk
    

    def load_static_keys(self, pk, msk):
        """
        This function loads new static keys.

        Arguments:
        * pk  - A Public Key, generated by ac17.setup()
        * msk - A Master Secret Key, generated by ac17.setup()
        """
        self.pk = pk
        self.msk = msk


    def keygen(self):
        """
        This function generates the non-static key, secret key(sk)
        """
        try:
            self.sk = ac17.kp_keygen(self.msk, self.policy)
        except:
            raise ValueError("Argument has wrong type")
    

class CPAc17(ABEscheme):
    """
    Python wrapper for the CPAc17 schceme implemented in (rabe::schemes::ac17)
    """
    def __init__(self, attributes:list[str], policy:str):
        self.attributes = attributes
        self.policy = policy
        self.pk = None
        self.msk = None
        self.sk = None
    

    def encrypt(self, plaintext:str):
        """
        This function encrypts plaintext data using a given JSON string policy and a list of attributes
        and produces a ciphertext if successfull

        Arguments:
        * plaintext - The plaintext data given as a string

        Returns:
        * cipheretext - The ciphertext generated by ac17.cp_encrypt()
        """
        try:
            ciphertext = ac17.cp_encrypt(self.pk, self.policy, plaintext)
            return ciphertext
        except:
            raise ValueError("Arguemtn has wrong type")


    def decrypt(self, ciphertext:str):
        """
        This function decrypts the ciphertext if the attributes in msk match the policy of ct.

        Arguments:
        * ciphertext - The ciphertext generated by ac17.kp_encrypt()

        Returns:
        * plaintext - The decrypted ciphertext as a list of u8's, generated by ac17.cp_decrypt()
        """
        try:
            plaintext = ac17.cp_decrypt(self.sk, ciphertext)
            return plaintext
        except:
            raise ValueError("Argument has wrong type")


    def generate_static_keys(self):
        """
        This function generates static keys, the public key (pk) and the master secret key (msk).
        """
        (pk, msk) = ac17.setup()
        self.pk = pk
        self.msk = msk


    def load_static_keys(self, pk, msk):
        """
        This function loads new static keys.

        Arguments:
        * pk  - A Public Key, generated by ac17.setup()
        * msk - A Master Secret Key, generated by ac17.setup()
        """
        self.pk = pk
        self.msk = msk


    def keygen(self):
        """
        This function generates the non-static key, secret key(sk)
        """
        try:
            self.sk = ac17.cp_keygen(self.msk, self.attributes)
        except:
            raise ValueError("Argument has wrong type")


"""
#----Aw11 example----
scheme = ABE(scheme=Aw11, attributes=["A", "B"], policy='"A" or "B"')
scheme.aw11.generate_static_keys()
scheme.aw11.keygen("bob", ["A"])
ciphertext = scheme.aw11.encrypt("our plaintext!")
plaintext_after = scheme.aw11.decrypt(ciphertext)
print("".join(chr(i) for i in plaintext_after))

#----KPAc17 example---
scheme = ABE(scheme=KPAc17, attributes=["A", "B"], policy='("A" and "B")')
scheme.kpac17.generate_static_keys()
scheme.kpac17.keygen()
ciphertext = scheme.kpac17.encrypt("Secret")
plaintext_after = scheme.kpac17.decrypt(ciphertext)
print(plaintext_after)

#----CPAc17 example---
scheme = ABE(scheme=CPAc17, attributes=["A", "B"], policy='("A" and "B")')
schemes.cpac17.generate_static_keys()
schemes.cpac17.keygen()
ciphertext = schemes.cpac17.encrypt("Secret 2")
plaintext_after = schemes.cpac17.decrypt(ciphertext)
print(plaintext_after)
"""

